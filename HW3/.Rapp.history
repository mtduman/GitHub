exp(265816.341307)
exp(2658.341307)
exp(26.341307)
exp(-65830.492086 )
exp(-123328.748275   )
exp(-123328.748275 )
exp(-12332923y327328.748275 )
exp(-12332923327328.748275 )
exp(-12332923327323232328.748275 )
exp(-12332923327323232328 )
exp(-12332923 )
exp(-12333 )
exp(-12 )
exp(691.258189)
exp(24.757157 )
exp(-24.757157 )
exp(-24.354596)
exp(-24.270470)
exp(-23.949972)
exp(-23.642250)
exp(2.332519e+01 )
exp(-2.332519e+01 )
exp( -51950.515654 )
exp( -7868.282022  )
exp( -78.282022  )
exp( -1  )
exp( 0  )
exp( -9 )
3.3109149705429810e+10
9.0000000000000000e+10
9.1234567890e+10
exp( -1 )
3.3109149705429810e+10
3.3109149705431446e+10
3.3109149705429810e+10
exp( -1 )
9.0000000000000000e+10
10/1
3.310915e+00
exp( -1 )
(*exp( -1 )
9*exp( -1 )
3.3109149705441845e+10
1.968802e+05
1.968802e+05 / 500000
1.968802e+05 / 3.310915
3.310915e+00
3.310915e+00 / 5
7.875210e+05 / 500000
2.140704e+06 /500000
2.140704e+06
4.500000e+01
4.500000e+01 /5
4.500000e+04 / 5000
1.655457e+01 / 5
1.655457e+05 / 50000
3.310915e+06 /1000000
3.310915e+06 / 1000000
3.310915e+07 / 9999999
3.3109149705209423e+10
3.3109149705424175e+10
2.3E-308
2.3E+308
1.7E+308
1.7E+30
1.7E+3
2.71251501e+08 - 2.71146237e+08
0.635688 / 5.06826000e-01
5.06826000e-01
5.06826000e-01 / 6.35688000e-01
10**13
10**13 - 9**12
9**12
10**13 - 999999999999
9e+12
10**13 - 999999999999999
10000000000000 - 999999999999
99999999999
10000000000000 - 9999999999999
1000000000000 -999999999999
1000000000000
10000000000
16.5 * 40 * 52
16.5 * 40 * 32
130  * 2
130  * 20
6.3000816231617784e-01
6.3000816231617784e-01 * 10**10
exp(-367)
exp(-360430437)
exp(360430437)
exp(-10)
exp(-4)
exp(-6)
5.4989664579284383e-21
0.00000000000000000000029098058242310236412776758445935765536276180192213902223921 / 16
0.00000000000000000000029098058242310236412776758445935765536276180192213902223921/ 16
0.44586839871132222246075116345309652388095855712890625000000000000000000000000000 / 4294967296
2.67632000e-01 / 4.65407000e-01
5.75049365e-01
4.76030000e-02 / 4.33155500e+00
0.256625 /  0.420077
1.00000000e+06
2.56625000e-01 / 4.20077000e-01
4.20077000e-01 /2.56625000e-01
2.56625000e-01 / 4.20077000e-01
6.10899906e-01
2.56625000e-01 /1.90206100e+00
exp(98.70877889752904366105212830007076263427734375000000000000000000000000000000000000)
exp(137.18959243806551739908172748982906341552734375000000000000000000000000000000000000)
e**137.18959243806551739908172748982906341552734375000000000000000000000000000000000000
e^^137.18959243806551739908172748982906341552734375000000000000000000000000000000000000
e^137.18959243806551739908172748982906341552734375000000000000000000000000000000000000
exp( 121.3261208517766220893463469110429286956787109375)
exp( -121.3261208517766220893463469110429286956787109375)
2.9285554460786140e-30
0.00000000000000000000000000001464277723039307092329754462931571636974716186621154/5
0.00000000000019013566395819724710550553875723398764572072416889625401381636038423 /500
0.00000000000000000000088216737589255658439847489637535974395195160291236566605993 /50
0.00000000000226143279645636309117019185753663651624809083351408389717107638716698/999
0.00000000000000000000000000000000000000000000001387496612242249599967676689343878/2
0.00000005450767499054017697789927118443009668169452197616919875144958496093750000/100000
0.00049608027525563044325684902702278122887946665287017822265625000000000000000000 / 9999999
0.00076108744441470200549348934515592191019095480442047119140625000000000000000000/9999999
0.000000000000000050474403544719711873354965016501858656416246553047533218717  /16
0.000000000000000000027163296337764605645473716507519085888160133854260318807 / 16
8.1311591285493607e-18  / 16
2.6740716529104355e-17  * 16
2.8193813207815256e-23  * 16
0.00394745319902555305557889653300662757828831672668457031250000000000000000000000 / 67108864
exp(-1)
0.00000000000000000900475092005078620640018750350649636608002763187410047440728533  + .00000000000000000000000000571146241183391928516977782300021891009104539550178886
(0.00000000000000000900475092005078620640018750350649636608002763187410047440728533  + .00000000000000000000000000571146241183391928516977782300021891009104539550178886) /17
exp(0)
exp(-1)
exp(-9)
exp(-140)
exp(-540)
0.000000000000000000000528847318776341748015794538969058238569341303743978639 / 6
0.000000000000000000000000000000000000000000000000000000001796202527666127191 /2
exp(-151)
exp(-130.66167557190962611457507591694593429565429687500000000000000000000000000000000000)
exp(-151.69620298957391923977411352097988128662109375000000000000000000000000000000000000)
1.796203e-57 +  1.315758e-66
(1.796203e-57 +  1.315758e-66) /2
0.000000000000000000000000000000000152083308811145084132615253050876477349075 + 0.000000000000000000000000000000000000000000000000000000000000000000000000012 + 0.000000000000000000000000000000000000000000000050318133046787783302027121257
( 0.000000000000000000000000000000000152083308811145084132615253050876477349075 + 0.000000000000000000000000000000000000000000000000000000000000000000000000012 + 0.000000000000000000000000000000000000000000000050318133046787783302027121257 ) /3
3.8565154448173925e-21 * 16
((3.8565154448173925e-21 * 16) + 0.00000000000000000000000571046526280994133327154827649641978365186008555865973685 ) /17
()(4.3760707512323231e-17 * 64) + 0.00000000000000000000000000000000000000236396516116992608369722685891200132953634) / 65
((4.3760707512323231e-17 * 64) + 0.00000000000000000000000000000000000000236396516116992608369722685891200132953634) / 65
0.00000000000001
4.5799788548030519e-12 - 1.3903299239698802e
4.5799788548030519e-12 - 1.3903299239698802e-14
.8 * exp((-1/72)*36)
.2 * exp((-1/72)*16)
0.4852245 / ( 0.4852245 +0.1601475)
library(ISLR) summary(Weekly)
library(ISLR)
library(Weekly)
install.packages("ISLR")>library(ISLR)
install.packages("ISLR")
install.packages("ISLR")>library(ISLR)
summary(Weeekly)
install.packages("ISLR")
install.packages("ISLR")>library(ISLR)
summary(Weeekly)
library(ISLR)summary(Auto)
cor(Auto[, -9])
attach(Auto)mpg01 = rep(0, length(mpg)) #
mpg01[mpg > median(mpg)] = 1 #
Auto = data.frame(Auto, mpg01)
cor(Auto[, -9])
options(digits=4)
cor(Auto[, -9])
options(digits=5)
cor(Auto[, -9])
cor(Auto[, -9])
options(digits=7)
cor(Auto[, -9])
pairs(Auto)
> pairs(Auto)#
	> dev.copy(png,"MTH522_hw3_p3b.png",width=8,height=6,units="in",res=200)#
	> dev.off()
pairs(Auto)#
dev.copy(png,"MTH522_hw3_p3b.png",width=8,height=6,units="in",res=200)#
 dev.off()
pairs(Auto)#
dev.copy(png,"MTH522_hw3_p3b.png",width=8,height=6,units="in",res=200)#
 dev.off()
getwd()
setwd("/Users/ekinezgi/Documents/UmassD/MTH_522_Istatistical_Learning2016F/HW/HW3")
pairs(Auto)#
dev.copy(png,"MTH522_hw3_p3b.png",width=8,height=6,units="in",res=200)#
 dev.off()
boxplot(cylinders ~ mpg01, data = Auto, main = "Cylinders vs mpg01"
)
boxplot(cylinders ~ mpg01, data = Auto, main = "Cylinders vs mpg01")
boxplot(cylinders ~ mpg01, data = Auto, main = "Cylinders vs mpg01")
boxplot(cylinders ~ mpg01, data = Auto, main = "Cylinders vs mpg01")#
 dev.copy(png,"MTH522_hw3_p3b2.png",width=8,height=6,units="in",res=200)#
dev.off()
boxplot(cylinders ~ mpg01, data = Auto, main = "Cylinders vs mpg01")#
 dev.copy(png,"MTH522_hw3_p3b2.png",width=8,height=6,units="in",res=200)#
dev.off()
boxplot(displacement ~ mpg01, data = Auto, main = "Displacement vs mpg01")#
 dev.copy(png,"MTH522_hw3_p3b3.png",width=8,height=6,units="in",res=200)#
dev.off()
boxplot(horsepower ~ mpg01, data = Auto, main = "Horsepower vs mpg01")#
 dev.copy(png,"MTH522_hw3_p3b4.png",width=8,height=6,units="in",res=200)#
dev.off()
boxplot(weight ~ mpg01, data = Auto, main = "Weight vs mpg01")#
 dev.copy(png,"MTH522_hw3_p3b5.png",width=8,height=6,units="in",res=200)#
dev.off()
boxplot(horsepower ~ mpg01, data = Auto, main = "Horsepower vs mpg01")#
 dev.copy(png,"MTH522_hw3_p3b6.png",width=8,height=6,units="in",res=200)#
dev.off()
boxplot(acceleration ~ mpg01, data = Auto, main = "Acceleration vs mpg01")#
 dev.copy(png,"MTH522_hw3_p3b6.png",width=8,height=6,units="in",res=200)#
dev.off()
boxplot(year ~ mpg01, data = Auto, main = "Year vs mpg01")#
 dev.copy(png,"MTH522_hw3_p3b7.png",width=8,height=6,units="in",res=200)#
dev.off()
train = (year %% 2 == 0) Auto.train = Auto[train, ] Auto.test = Auto[!train, ] mpg01.test = mpg01[!train]
fit.lda = lda(mpg01 ~ cylinders + weight + displacement + horsepower, data = Auto, s ubset = train) fit.lda
library(MASS)
fit.lda = lda(mpg01 ~ cylinders + weight + displacement + horsepower,data = Auto, subset = train) fit.lda
pred.lda = predict(fit.lda, Auto.test)
table(pred.lda$class, mpg01.test)
mean(pred.lda$class != mpg01.test)
table(pred.lda$class, mpg01.test)#
mean(pred.lda$class != mpg01.test)
fit.gda = lda(mpg01 ~ cylinders + weight + displacement + horsepower,data = Auto, subset = train)#
fit.gda
mean(pred.gda$class != mpg01.test)
pred.gda = predict(fit.gda, Auto.test)#
 table(pred.gda$class, mpg01.test)
pred.gda = predict(fit.gda, Auto.test)#
 table(pred.gda$class, mpg01.test)
pred.gda = predict(fit.gda, Auto.test)#
 table(pred.gda$class, mpg01.test)
pred.gda = predict(fit.gda, Auto.test)#
 table(pred.gda$class, mpg01.test)
pred.gda = predict(fit.gda, Auto.test)#
 table(pred.gda$class, mpg01.test)
pred.gda = predict(fit.gda, Auto.test)#
 table(pred.gda$class, mpg01.test)
pred.gda = predict(fit.gda, Auto.test)#
 table(pred.gda$class, mpg01.test)
fit.gda = qda(mpg01 ~ cylinders + weight + displacement + horsepower,data = Auto, subset = train)#
fit.qda
fit.qda = qda(mpg01 ~ cylinders + weight + displacement + horsepower,data = Auto, subset = train)#
fit.qda
pred.qda = predict(fit.qda, Auto.test)#
	table(pred.qda$class, mpg01.test)
> mean(pred.qda$class != mpg01.test)
mean(pred.qda$class != mpg01.test)
fit.gda = gda(mpg01 ~ cylinders + weight + displacement + horsepower,data = Auto, subset = train)#
fit.gda
fit.glm = glm(mpg01 ~ cylinders + weight + displacement + horsepower,data = Auto, subset = train)#
	> fit.glm
fit.glm = glm(mpg01 ~ cylinders + weight + displacement + horsepower,data = Auto, subset = train)#
fit.glm
fit.glm = glm(mpg01 ~ cylinders + weight + displacement + horsepower, data = Auto, f amily = binomial, subset = train) summary(fit.glm)
fit.glm = glm(mpg01 ~ cylinders + weight + displacement + horsepower, data = Auto, family = binomial, subset = train) summary(fit.glm)
probs = predict(fit.glm, Auto.test, type = "response") pred.glm = rep(0, length(probs)) pred.glm[probs > 0.5] = 1 table(pred.glm, mpg01.test)
mean(pred.glm != mpg01.test)
train.X = cbind(cylinders, weight, displacement, horsepower)[train, ] test.X = cbind(cylinders, weight, displacement, horsepower)[!train, ] train.mpg01 = mpg01[train] set.seed(1) pred.knn = knn(train.X, test.X, train.mpg01, k = 1) table(pred.knn, mpg01.test)
library(class)#
train.X = cbind(cylinders, weight, displacement, horsepower)[train, ] test.X = cbind(cylinders, weight, displacement, horsepower)[!train, ] train.mpg01 = mpg01[train] set.seed(1) pred.knn = knn(train.X, test.X, train.mpg01, k = 1) table(pred.knn, mpg01.test)
mean(pred.knn != mpg01.test)
pred.knn = knn(train.X, test.X, train.mpg01, k = 10) table(pred.knn, mpg01.test)
mean(pred.knn != mpg01.test)
``
pred.knn = knn(train.X, test.X, train.mpg01, k = 100) table(pred.knn, mpg01.test)
mean(pred.knn != mpg01.test)
library(MASS)attach(Boston)crim01 <- rep(0, length(crim)) crim01[crim > median(crim)] <- 1 Boston <- data.frame(Boston, crim01) train <- 1:(length(crim) / 2) test <- (length(crim) / 2 + 1):length(crim) Boston.train <- Bos
library(MASS)#
attach(Boston)crim01 = rep(0, length(crim)) crim01[crim > median(crim)] = 1 #
Boston = data.frame(Boston, crim01)#
 train = 1:(length(crim) / 2) test = (length(crim) / 2 + 1):length(crim) Boston.train = Boston[train, ]#
 Boston.test = Boston[test, ] crim01.test = crim01[test] fit.glm = glm(crim01 ~ . - crim01 - crim, data = Boston, family = binomial, subset = train)
library(MASS)#
attach(Boston)crim01 = rep(0, length(crim)) crim01[crim > median(crim)] = 1 #
Boston = data.frame(Boston, crim01)#
 train = 1:(length(crim) / 2) test = (length(crim) / 2 + 1):length(crim) Boston.train = Boston[train, ]#
 Boston.test = Boston[test, ] crim01.test = crim01[test] fit.glm = glm(crim01 ~ . - crim01 - crim, data = Boston, family = binomial, subset = train)
library(MASS)#
attach(Boston)crim01 = rep(0, length(crim)) crim01[crim > median(crim)] = 1
library(MASS)#
attach(Boston)crim01 = rep(0, length(crim)) crim01[crim > median(crim)] = 1
library(MASS)#
attach(Boston)crim01 = rep(0, length(crim)) #
crim01[crim > median(crim)] = 1
library(MASS)#
attach(Boston)crim01 = rep(0, length(crim)) #
crim01[crim > median(crim)] = 1
library(MASS)attach(Boston)crim01 = rep(0, length(crim)) #
crim01[crim > median(crim)] =1 #
Boston = data.frame(Boston, crim01) train = 1:(length(crim) / 2) test = (length(crim) / 2 + 1):length(crim)
attach(Boston)crim01 = rep(0, length(crim)) #
crim01[crim > median(crim)] = 1 #
Boston = data.frame(Boston, crim01) train = 1:(length(crim) / 2) test = (length(crim) / 2 + 1):length(crim) Boston.train = Boston[train, ] Boston.test = Boston[test, ] crim01.test = crim01[test] fit.glm <- glm(crim01 ~ . - crim01 - crim, data = Boston, family = binomial, subset = train)
library(MASS)#
attach(Boston)crim01 = rep(0, length(crim)) #
crim01[crim > median(crim)] = 1 #
Boston = data.frame(Boston, crim01) train = 1:(length(crim) / 2) test = (length(crim) / 2 + 1):length(crim) Boston.train = Boston[train, ] Boston.test = Boston[test, ] crim01.test = crim01[test] fit.glm <- glm(crim01 ~ . - crim01 - crim, data = Boston, family = binomial, subset = train)
library(MASS)#
attach(Boston)crim01 = rep(0, length(crim)) #
crim01[crim > median(crim)] = 1 #
Boston = data.frame(Boston, crim01) train = 1:(length(crim) / 2) test = (length(crim) / 2 + 1):length(crim) Boston.train = Boston[train, ] Boston.test = Boston[test, ] crim01.test = crim01[test] fit.glm <- glm(crim01 ~ . - crim01 - crim, data = Boston, family = binomial, subset = train)
library(MASS)#
attach(Boston)crim01 = rep(0, length(crim)) #
crim01[crim > median(crim)] = 1 #
Boston = data.frame(Boston, crim01) train = 1:(length(crim) / 2) test = (length(crim) / 2 + 1):length(crim) Boston.train = Boston[train, ] Boston.test = Boston[test, ] crim01.test = crim01[test] fit.glm = glm(crim01 ~ . - crim01 - crim, data = Boston, family = binomial, subset = train)
library(MASS)#
attach(Boston)crim01 = rep(0, length(crim)) #
crim01[crim > median(crim)] = 1 #
Boston = data.frame(Boston, crim01)#
 train = 1:(length(crim) / 2) test = (length(crim) / 2 + 1):length(crim) Boston.train = Boston[train, ] Boston.test = Boston[test, ] crim01.test = crim01[test]#
 fit.glm = glm(crim01 ~ . - crim01 - crim, data = Boston, family = binomial, subset = train)
attach(Boston)crime01 = rep(0, length(crim))crime01[crim > median(crim)] = 1Boston = data.frame(Boston, crime01)train = 1:(dim(Boston)[1]/2)test = (dim(Boston)[1]/2 + 1):dim(Boston)[1]Boston.train = Boston[train, ]Boston.test = Boston[test, ]crime01.test = crime01[test]
attach(Boston)crime01 = rep(0, length(crim))crime01[crim > median(crim)] = 1Boston = data.frame(Boston, crime01)train = 1:(dim(Boston)[1]/2)test = (dim(Boston)[1]/2 + 1):dim(Boston)[1]Boston.train = Boston[train, ]Boston.test = Boston[test, ]crime01.test = crime01[test]
summary(Boston)
